// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace QuoteAcceptanceTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class QuoteCreationFeature : object, Xunit.IClassFixture<QuoteCreationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Quote Creation", "  The quote creation API should return a success message and correct total for va" +
                "rious item and discount scenarios.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateQuote.feature"
#line hidden
        
        public QuoteCreationFeature(QuoteCreationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC1 - Create quote with one item")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC1 - Create quote with one item")]
        public async global::System.Threading.Tasks.Task AC1_CreateQuoteWithOneItem()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC1 - Create quote with one item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table1.AddRow(new string[] {
                            "Widget",
                            "1",
                            "100.00",
                            "0.0"});
#line 5
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table1, "Given ");
#line hidden
#line 8
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 10
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.AndAsync("the total value should be 100.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC2 - Create quote with one item and discount")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC2 - Create quote with one item and discount")]
        public async global::System.Threading.Tasks.Task AC2_CreateQuoteWithOneItemAndDiscount()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC2 - Create quote with one item and discount", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table2.AddRow(new string[] {
                            "Gadget",
                            "2",
                            "50.00",
                            "0.1"});
#line 14
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table2, "Given ");
#line hidden
#line 17
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 18
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 19
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("the total value should be 90.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC3 - Create quote with two items")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC3 - Create quote with two items")]
        public async global::System.Threading.Tasks.Task AC3_CreateQuoteWithTwoItems()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC3 - Create quote with two items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table3.AddRow(new string[] {
                            "ItemA",
                            "1",
                            "30.00",
                            "0.0"});
                table3.AddRow(new string[] {
                            "ItemB",
                            "2",
                            "15.00",
                            "0.0"});
#line 23
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table3, "Given ");
#line hidden
#line 27
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 29
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
    await testRunner.AndAsync("the total value should be 60.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC4 - Create quote with three items")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC4 - Create quote with three items")]
        public async global::System.Threading.Tasks.Task AC4_CreateQuoteWithThreeItems()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC4 - Create quote with three items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table4.AddRow(new string[] {
                            "Item1",
                            "3",
                            "10.00",
                            "0.0"});
                table4.AddRow(new string[] {
                            "Item2",
                            "1",
                            "100.00",
                            "0.5"});
                table4.AddRow(new string[] {
                            "Item3",
                            "2",
                            "25.00",
                            "0.1"});
#line 33
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table4, "Given ");
#line hidden
#line 38
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
    await testRunner.AndAsync("the total value should be 125.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC5 - Create quote with item price = 0")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC5 - Create quote with item price = 0")]
        public async global::System.Threading.Tasks.Task AC5_CreateQuoteWithItemPrice0()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC5 - Create quote with item price = 0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table5.AddRow(new string[] {
                            "FreeSupport",
                            "2",
                            "0.00",
                            "0.0"});
#line 44
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table5, "Given ");
#line hidden
#line 47
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 49
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
    await testRunner.AndAsync("the total value should be 0.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC6 - Create quote with discountPercentage = 0")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC6 - Create quote with discountPercentage = 0")]
        public async global::System.Threading.Tasks.Task AC6_CreateQuoteWithDiscountPercentage0()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC6 - Create quote with discountPercentage = 0", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table6.AddRow(new string[] {
                            "ItemNoDiscount",
                            "5",
                            "10.00",
                            "0.0"});
#line 53
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table6, "Given ");
#line hidden
#line 56
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 58
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
    await testRunner.AndAsync("the total value should be 50.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC7 - Create quote with discountPercentage = 1 (100%)")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC7 - Create quote with discountPercentage = 1 (100%)")]
        public async global::System.Threading.Tasks.Task AC7_CreateQuoteWithDiscountPercentage1100()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC7 - Create quote with discountPercentage = 1 (100%)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table7.AddRow(new string[] {
                            "FreeItem",
                            "3",
                            "20.00",
                            "1.0"});
#line 62
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table7, "Given ");
#line hidden
#line 65
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
    await testRunner.AndAsync("the total value should be 0.00", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC8 - Create quote with missing customer field")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC8 - Create quote with missing customer field")]
        public async global::System.Threading.Tasks.Task AC8_CreateQuoteWithMissingCustomerField()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC8 - Create quote with missing customer field", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 71
    await testRunner.GivenAsync("a new quote request without the customer field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 72
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 74
    await testRunner.AndAsync("the response message should contain \"Customer or Items cannot be null or empty\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC9 - Create quote with missing items array")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC9 - Create quote with missing items array")]
        public async global::System.Threading.Tasks.Task AC9_CreateQuoteWithMissingItemsArray()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC9 - Create quote with missing items array", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 77
    await testRunner.GivenAsync("a new quote request without the items field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 78
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 79
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 80
    await testRunner.AndAsync("the response message should contain \"Customer or Items cannot be null or empty\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC10 - Create quote with quantity zero")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC10 - Create quote with quantity zero")]
        public async global::System.Threading.Tasks.Task AC10_CreateQuoteWithQuantityZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC10 - Create quote with quantity zero", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table8.AddRow(new string[] {
                            "InvalidQty",
                            "0",
                            "100.00",
                            "0.0"});
#line 83
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table8, "Given ");
#line hidden
#line 86
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 87
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 88
    await testRunner.AndAsync("the response message should contain \"quantity must be greater than 0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC11 - Create quote with negative price")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC11 - Create quote with negative price")]
        public async global::System.Threading.Tasks.Task AC11_CreateQuoteWithNegativePrice()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC11 - Create quote with negative price", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table9.AddRow(new string[] {
                            "InvalidPrice",
                            "2",
                            "-10.00",
                            "0.0"});
#line 91
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table9, "Given ");
#line hidden
#line 94
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 95
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 96
    await testRunner.AndAsync("the response message should contain \"price must be greater than 0\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC12 - Create quote with invalid discount percentage")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC12 - Create quote with invalid discount percentage")]
        public async global::System.Threading.Tasks.Task AC12_CreateQuoteWithInvalidDiscountPercentage()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC12 - Create quote with invalid discount percentage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table10.AddRow(new string[] {
                            "InvalidDiscHi",
                            "1",
                            "50.00",
                            "1.5"});
#line 99
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table10, "Given ");
#line hidden
#line 102
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 103
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 104
    await testRunner.AndAsync("the response message should contain \"discount must be between 0 and 1\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC13 - Create quote with large quantity and price")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC13 - Create quote with large quantity and price")]
        public async global::System.Threading.Tasks.Task AC13_CreateQuoteWithLargeQuantityAndPrice()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC13 - Create quote with large quantity and price", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table11.AddRow(new string[] {
                            "Expensive",
                            "100000",
                            "99999.99",
                            "0.0"});
#line 107
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table11, "Given ");
#line hidden
#line 110
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 111
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 112
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC14 - Create quote with decimal precision")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC14 - Create quote with decimal precision")]
        public async global::System.Threading.Tasks.Task AC14_CreateQuoteWithDecimalPrecision()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC14 - Create quote with decimal precision", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Quantity",
                            "UnitaryPrice",
                            "DiscountPercentage"});
                table12.AddRow(new string[] {
                            "PreciseOne",
                            "1.25",
                            "9.99",
                            "0.0"});
#line 115
    await testRunner.GivenAsync("a new quote for a customer with the following items:", ((string)(null)), table12, "Given ");
#line hidden
#line 118
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 119
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 120
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 121
    await testRunner.AndAsync("the total value should be 12.4875", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC15 - Performance test with many items")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC15 - Performance test with many items")]
        public async global::System.Threading.Tasks.Task AC15_PerformanceTestWithManyItems()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC15 - Performance test with many items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 124
    await testRunner.GivenAsync("a new quote for a customer with 1000 valid items", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 125
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 126
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 127
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC16 - Security test with script injection")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC16 - Security test with script injection")]
        public async global::System.Threading.Tasks.Task AC16_SecurityTestWithScriptInjection()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC16 - Security test with script injection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 130
    await testRunner.GivenAsync("a new quote for a customer with name \"<script>alert(1)</script>\" and a valid item" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 131
    await testRunner.WhenAsync("I send the quote creation request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 132
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 133
    await testRunner.AndAsync("the response message should be \"Quote created successfully.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
    await testRunner.AndAsync("the response should not contain \"<script>\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="AC17 - Concurrent quote submissions")]
        [Xunit.TraitAttribute("FeatureTitle", "Quote Creation")]
        [Xunit.TraitAttribute("Description", "AC17 - Concurrent quote submissions")]
        public async global::System.Threading.Tasks.Task AC17_ConcurrentQuoteSubmissions()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AC17 - Concurrent quote submissions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 137
    await testRunner.GivenAsync("multiple users sending quote requests at the same time", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 138
    await testRunner.WhenAsync("all requests are processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 139
    await testRunner.ThenAsync("all responses should return status code 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 140
    await testRunner.AndAsync("each response should contain correct total and confirmation message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await QuoteCreationFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await QuoteCreationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
